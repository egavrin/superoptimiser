cmdhistory=["(apply hash-map\\n       (let [i (atom 0)]\\n         (interleave (repeatedly \#(swap\! i inc))\\n              (keys m))))" "(apply hash-map\\n       (let [i (atom 21)]\\n         (interleave (repeatedly \#(swap\! i inc))\\n              (keys m))))" "(apply hash-map\\n       (let [i (atom 21)]\\n         (keys m)\\n         (interleave (repeatedly \#(swap\! i inc)))))" "(apply hash-map\\n       (let [i (atom 21)]\\n         \\n         (interleave (keys m) (repeatedly \#(swap\! i inc)))))" "(apply hash-map\\n       (let [i (atom 21)]\\n         (interleave (keys m) (repeatedly \#(swap\! i inc)))))" "(apply hash-map\\n       (let [i (atom 21)]\\n         (interleave (keys m) (repeatedly \#([\:var (swap\! i inc)])))))" "(apply hash-map\\n       (let [i (atom 21)]\\n         (interleave (keys m) (repeatedly \#('[\:var (swap\! i inc)])))))" "(apply hash-map\\n       (let [i (atom 21)]\\n         (interleave (keys m) (repeatedly \#(vec (\:var (swap\! i inc)))))))" "(apply hash-map\\n       (let [i (atom 21)]\\n         (interleave (keys m) (repeatedly \#(vec ('\:var (swap\! i inc)))))))" "(apply hash-map\\n       (let [i (atom 21)]\\n         (interleave (keys m) (repeatedly \#(\:var (swap\! i inc))))))" "(apply hash-map\\n       (let [i (atom 21)]\\n         (interleave (keys m) (repeatedly \#([\:var (swap\! i inc)])))))" "[\:var 1]" "(apply hash-map\\n       (let [i (atom 21)]\\n         (interleave (keys m) (repeatedly \#[\:var (swap\! i inc)]))))" "(apply hash-map\\n       (let [i (atom 21)]\\n         (interleave (keys m) (repeatedly \#(vec {\:var (swap\! i inc)})))))" "(apply hash-map\\n       (let [i (atom 21)]\\n         (interleave (keys m) (repeatedly \#(vec \:var (swap\! i inc))))))" "(vec \:var 1)" "(vec (\:var 1))" "(vec '(\:var 1))" "(vec '(\:var 1) '(\:var 2))" "(apply hash-map\\n       (let [i (atom 21)]\\n         (interleave (keys m) (repeatedly \#([\:var (swap\! i inc)])))))" "(apply hash-map\\n       (let [i (atom 21)]\\n         (interleave (keys m) (repeatedly \#(list \:var (swap\! i inc))))))" "(apply hash-map\\n       (let [i (atom 21)]\\n         (interleave (keys m) (repeatedly \#(vec \:var (swap\! i inc))))))" "(apply hash-map\\n       (let [i (atom 21)]\\n         (interleave (keys m) (repeatedly \#(list \:var (swap\! i inc))))))" "(apply hash-map\\n       (let [i (atom 21)]\\n         (interleave (keys m) (repeatedly \#(vector \:var (swap\! i inc))))))" "(prune-stats 6)" "(use 'org.tomhume.so.PruningTests)" "(prune-stats 6)" "(prune-stats 8)" "(count (expanded-numbered-opcode-sequences 2 1))" "(use 'org.tomhume.so.Opcodes)" "(count (expanded-numbered-opcode-sequences 2 1))" "(count (expanded-numbered-opcode-sequence 2 1))" "(count (expanded-numbered-opcode-sequence 3 1))" "(count (opcode-sequence 3 1))" "(count (opcode-sequence 4 1))" "(count (opcode-sequence 5 1))" "(count (opcode-sequence 3 1))" "(count (opcode-sequence 4 1))" "(count (opcode-sequence 3 1))" "(count (opcode-sequence 2 1))" "(count (opcode-sequence 1 1))" "(count (opcode-sequence 2 1))" "(count (opcode-sequence 3 1))" "(count (opcode-sequence 4 1))" "(count\\n  (expanded-numbered opcode-sequence 2 1))" "(count\\n  (expanded-numbered-opcode-sequence 2 1))" "(count\\n  (expanded-numbered-opcode-sequence 3 1))" "(count\\n  (expanded-numbered-opcode-sequence 4 1))" "(doc swap\!)" "1" "(mod 5000 1000)" "(doc do)" "1" "2" "3" "1" "classloader" "(use 'Main.Bytecode)" "classloader" "@classloader" "instantiate-classloader" "(instantiate-classloader)" "(instantiate-classloader 1)" "1" "(doc swap\!)" "(doc set\!)" "(doc swap\!)" "(init-classloader)" "(instantiate-classloader)" "(instantiate-classloader 1)" "(init-classloader)" "classloader" "@classloader" ".defineClass" "(is (\= true (no-redundancy? 1 '[\:iload_0 \:ireturn])))" "(use 'clojure.test)" "(is (\= true (no-redundancy? 1 '[\:iload_0 \:ireturn])))" "(use '[Filters.RedundancyFilter])" "(is (\= true (no-redundancy? 1 '[\:iload_0 \:ireturn])))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'Main.Bytecode)))" "(def classloader (atom (new clojure.lang.DynamicClassLoader)))" "(swap\! classloader instantiate-classloader)" "(use 'Main.Bytecode)" "(swap\! classloader instantiate-classloader)" "classloader" "1" "(time (count (expanded-numbered-opcode-sequence 5 1)))" "(use 'Main.Opcodes)" "(time (count (expanded-numbered-opcode-sequence 5 1)))" "(time-limited 1000 (sleep 100000))" "(use 'Util.TestMap)" "(time-limited 1000 (sleep 100000))" "(time-limited 1000 (Thread/sleep 100000))" "(time-limited 1000 (Thread/sleep 100))" "(time-limited 1000 (Thread/sleep 1001))" "(time-limited 1000 true)" "(expand-arg 1 3 \:branch-dest)" "(use 'Main.Opcodes)" "(expand-arg 1 3 \:branch-dest)" "(expand-arg 1 2 \:branch-dest)" "(expand-arg 1 1 2 \:branch-dest)" "(expand-arg 1 1 3 \:branch-dest)" "(expand-arg 0 1 3 \:branch-dest)" "(expand-arg 1 1 3 \:branch-dest)" "(expand-arg 2 1 3 \:branch-dest)" "(expand-arg 3 1 3 \:branch-dest)" "(expanded-numbered-opcode-sequence 2 1)" "(expanded-numbered-opcode-sequence 3 1)" "(expanded-numbered-opcode-sequence 2 1)" "(expanded-numbered-opcode-sequence 3 1)" "(expand-arg 1 1 3 \:branch-dest)" "(expand-opcodes 1 '[\:iconst_4 \:goto \:ireturn])" "(count '[\:iconst_4 \:goto \:ireturn])" "(expand-arg 0 1 3 \:branch-dest)" "(expand-opcodes 1 '[\:iconst_4 \:goto \:ireturn])" "(expand-arg 1 3 2 \:branch-dest)" "(count '[\:iconst_4 \:goto \:ireturn])" "(expand-arg 1 3 2 \:branch-dest)" "(expand-opcodes 1 '[\:iconst_4 \:goto \:ireturn])" "(expand-opcodes 1 '[\:iconst_4 \:goto])" "(expand-opcodes 1 '[\:iconst_4 \:goto \:ireturn])" "(expand-opcodes 1 '[\:iconst_4 \:iconst_0 \:goto])" "(expand-arg 1 5 1 \:local-var)" "(expanded-numbered-opcode-sequence 3 1)" "(expanded-numbered-opcode-sequence 4 1)" "(take 10000 (expanded-numbered-opcode-sequence 4 1))" "(take 1 (expanded-numbered-opcode-sequence 4 1))" "1" "(is (\= '() (update-labelling '(\:iload_0 \:goto -1 \:ireturn) \:label_0 1 -1)))" "(update-labelling '(\:iload_0 \:goto -1 \:ireturn) \:label_0 1 -1)" "(use 'Main.Bytecode)" "(update-labelling '(\:iload_0 \:goto -1 \:ireturn) \:label_0 1 -1)" "(update-labelling '(\:iload_0 \:goto -1 \:ireturn) \:label_0 1 1)" "(update-labelling '(\:a 1 \:b \:c \:d \:e) \:1 0 2)" "(insert-at '(\:a 1 \:b \:c \:d \:e) \:1 0 2)" "(< 2 1)" "(< 1 2)" "(insert-at '(\:a 1 \:b \:c \:d \:e) \:1 0 2)" "(name \:label_0)" "(re-find \#\\"^label\\" \\"label-1\\")" "(re-find \#\\"^label\\" \\"fred\\")" "(re-find \#\\"^label\\" \\"this is a label\\")" "(seq (re-find \#\\"^label\\" \\"this is a label\\"))" "(seq (re-find \#\\"^label\\" \\"label-\\"))" "(re-find \#\\"^label\\" \\"label-\\")" "(if (re-find \#\\"^label\\" \\"label-\\") true false)" "(if (re-find \#\\"^label\\" \\"a label-\\") true false)" "(distinct (filter \#(re-matches \#\\"^label_\\") '(\:one \:two \:label_1 \:three \:label_2 \:four \:label_1)))" "(distinct (filter \#(re-matches \#\\"^label_\\" %) '(\:one \:two \:label_1 \:three \:label_2 \:four \:label_1)))" "(distinct (filter \#(re-matches \#\\"^label_\\" (name %)) '(\:one \:two \:label_1 \:three \:label_2 \:four \:label_1)))" "(filter \#(re-matches \#\\"^label_\\" (name %)) '(\:one \:two \:label_1 \:three \:label_2 \:four \:label_1))" "(filter \#(re-matches \#\\"label_\\" (name %)) '(\:one \:two \:label_1 \:three \:label_2 \:four \:label_1))" "(filter \#(re-matches \#\\"label_\\" (name %)) '[\:one \:two \:label_1 \:three \:label_2 \:four \:label_1])" "(filter \#(re-matches \#\\"^label_\\" (name %)) '[\:one \:two \:label_1 \:three \:label_2 \:four \:label_1])" "(re-matches \#\\"^label_\\" (name \:label_1))" "(re-matches \#\\"label\\" (name \:label_1))" "(name \:kabel_1)" "(re-matches \#\\"label\\" (name \:label_1))" "(filter \#(re-find \#\\"^label_\\" (name %)) '[\:one \:two \:label_1 \:three \:label_2 \:four \:label_1])" "(distinct (filter \#(re-find \#\\"^label_\\" (name %)) '[\:one \:two \:label_1 \:three \:label_2 \:four \:label_1]))" "(map \#{% (new LabelNode)} (distinct\\n  (filter \#(re-find \#\\"^label_\\" (name %))\\n          '[\:one \:two \:label_1 \:three \:label_2 \:four \:label_1])))" "(import '(org.objectweb.asm.tree  AbstractInsnNode VarInsnNode InsnNode IincInsnNode IntInsnNode ClassNode MethodNode InsnList LabelNode))" "(map \#{% (new LabelNode)} (distinct\\n  (filter \#(re-find \#\\"^label_\\" (name %))\\n          '[\:one \:two \:label_1 \:three \:label_2 \:four \:label_1])))" "(map \#(% (new LabelNode)) (distinct\\n  (filter \#(re-find \#\\"^label_\\" (name %))\\n          '[\:one \:two \:label_1 \:three \:label_2 \:four \:label_1])))" "(distinct\\n  (filter \#(re-find \#\\"^label_\\" (name %))\\n          '[\:one \:two \:label_1 \:three \:label_2 \:four \:label_1]))" "(map \#(% (new LabelNode)) (distinct\\n  (filter \#(re-find \#\\"^label_\\" (name %))\\n          '[\:one \:two \:label_1 \:three \:label_2 \:four \:label_1])))" "(map \#(assoc % (new LabelNode)) (distinct\\n  (filter \#(re-find \#\\"^label_\\" (name %))\\n          '[\:one \:two \:label_1 \:three \:label_2 \:four \:label_1])))" "(map \#(assoc {} % (new LabelNode)) (distinct\\n  (filter \#(re-find \#\\"^label_\\" (name %))\\n          '[\:one \:two \:label_1 \:three \:label_2 \:four \:label_1])))" "(into {} (map \#(assoc {} % (new LabelNode)) (distinct\\n  (filter \#(re-find \#\\"^label_\\" (name %))\\n          '[\:one \:two \:label_1 \:three \:label_2 \:four \:label_1]))))" "(get-class-bytes '(\:iload_0 \:ireturn) \\"Identity\\" \\"id\\" \\"I(I)\\")" "(get-class-bytes '(\:iload_0 \:ireturn) \\"Identity\\" \\"identity\\" \\"I(I)\\")" "(get-class-bytes '(\:iload_0 \:ireturn) \\"Identity\\" \\"identity\\" \\"(I)I\\")" "(get-instructions '(\:iload_0 \:ireturn))" "(.iterator \\n  (get-instructions '(\:iload_0 \:ireturn)))" "(iterator-seq (.iterator \\n  (get-instructions '(\:iload_0 \:ireturn))))" "(iterator-seq (.iterator \\n  (get-instructions '(\:iload_0 \:goto -1 \:ireturn))))" "(expanded-numbered-opcode-sequence 3 1)" "(use 'Main.Superoptimise)" "(expanded-numbered-opcode-sequence 3 1)" "(use 'Main.Opcodes)" "(expanded-numbered-opcode-sequence 3 1)" "(opcode-sequence 3 1)" "(use 'Main.Opcodes)" "(opcode-sequence 3 1)" "(opcode-sequence 2 1)" "(name 0)" "(type 0)" "(type \:name)" "(class \:name)" "(use 'Main.Bytecode)" "(add-opcode-and-args (new InsnList) '(\:goto {})\\n                     )" "(import '(org.objectweb.asm.tree  AbstractInsnNode VarInsnNode InsnNode IincInsnNode JumpInsnNode IntInsnNode ClassNode MethodNode InsnList LabelNode))" "(add-opcode-and-args (new InsnList) '(\:goto {})\\n                     )" "(add-opcode-and-args\\n  (new InsnList)\\n  '(\:goto)\\n  {})" "(is-a-label? \:goto)" "(if (is-a-label? \:goto)\\n  0\\n  (count ((opcodes op) \:args)))" "(use 'Main.Global)" "(if (is-a-label? \:goto)\\n  0\\n  (count ((opcodes op) \:args)))" "(if (is-a-label? \:goto)\\n  0\\n  (count ((opcodes \:goto) \:args)))" "(is-jump? \:goto)" "((opcodes \:goto) \:opcode)" "(add-opcode-and-args\\n  (new InsnList)\\n  '(\:goto)\\n  {})" "(add-opcode-and-args\\n  (new InsnList)\\n  '(\:goto \:label_0)\\n  {\:label_0 (new LabelNode)})" "(add-opcode-and-args\\n  (new InsnList)\\n  '(\:goto)\\n  {})" "(get-instructions '(\:iload_0 \:goto 1 \:ireturn))" "(add-labels '(\:iload_0 \:goto 1 \:ireturn))" "(make-labels-map '(\:iload_0 \:goto \:label_0 \:label_0 \:ireturn))" "(filter is-a-label? '(\:iload_0 \:goto \:label_0 \:label_0 \:ireturn))" "(\= \\"clojure.lang.Keyword\\" (type \:iload_0))" "(type \:iload_0)" "(\= clojure.lang.Keyword (type \:iload_0))" "(filter is-a-label? '(\:iload_0 \:goto \:label_0 \:label_0 \:ireturn))" "(get-instructions '(\:bipush 0 \:goto -2 \:ireturn))" "(iterator-seq(.iterator \\n     (get-instructions '(\:bipush 0 \:goto -2 \:ireturn))))" "(iterator-seq(.iterator \\n     (get-instructions '(\:bipush 1 \:goto -1 \:ireturn))))" "(get-instructions '(\:bipush 1 \:goto -1 \:ireturn))" "(add-labels '(\:bipush 1 \:goto -1 \:ireturn))" "(opcode-sequence 3 1)" "(expand-opcodes 2 1)" "(expand-opcodes 1 2)" "(expand-opcodes 1 '(\:bipush \:ireturn))" "(map \#(list % (\:args (opcodes %))) '(bipush \:ireturn))" "(map \#(list % (\:args (opcodes %))) '(\:bipush \:ireturn))" "(map \#(list % (flatten (\:args (opcodes %))))\\n     '(\:bipush \:ireturn))" "(map \#(conj % (\:args (opcodes %)))\\n     '(\:bipush \:ireturn))" "(map \#(cons % (\:args (opcodes %)))\\n     '(\:bipush \:ireturn))" "(expand-opcodes 1 '(\:bipush \:ireturn))" "(map \#(cons % (\:args (opcodes %)))\\n     '(\:bipush \:ireturn))" "(flatten (map \#(cons % (\:args (opcodes %)))\\n        '(\:bipush \:ireturn)))" "(expand-opcodes 1 '(\:bipush \:ireturn))" "(expand-arg 1 2 1 '(\:bipush \:byte))" "(expand-opcodes 1 '(\:bipush \:ireturn))" "(map \#(cons % (\:args (opcodes %))) '(\:bipush \:ireturn))" "(map-indexed (partial expand-arg max-vars seq-length) \\n             (map \#(cons % (\:args (opcodes %)))\\n                  '(\:bipush \:ireturn)))" "(map-indexed (partial expand-arg 1 2) \\n             (map \#(cons % (\:args (opcodes %)))\\n                  '(\:bipush \:ireturn)))" "(expand-opcodes 1 '(\:bipush \:ireturn))" "(expand-opcodes 1 '[\:iconst_4 \:goto \:ireturn])" "(expand-opcodes 1 '(\:bipush \:ireturn))" "(expand-opcodes 1 '[\:iconst_4 \:goto \:ireturn])" "(filter \#(not(\= % 0))\\n        (map \#(inc (- % 1)) (range 0 2)))" "(map \#(inc (- % 1)) (range 0 2))" "(range 0 2)" "(expand-opcodes 1 '[\:iconst_4 \:goto \:ireturn])" "(filter \#(not(\= % 0))\\n        (map \#(inc (- % 1)) (range 0 3)))" "(filter \#(not(\= % 0))\\n        (map \#(inc (- 1 %)) (range 0 3)))" "(filter \#(not(\= % 0))\\n        (map \#(- 1 %) (range 0 3)))" "(filter \#(not(\= % 0))\\n        (map \#(- % 1) (range 0 3)))" "(expand-opcodes 1 '[\:iconst_4 \:goto \:ireturn])" "(seq \:fred)" "(seq [\:fred])" "\:fred" "(map-indexed\\n  (partial expand-arg max-vars seq-length)\\n  (map \#(cons % (\:args (opcodes %))) '[\:iconst_4 \:goto \:ireturn]))" "(map-indexed\\n  (partial expand-arg 1 3)\\n  (map \#(cons % (\:args (opcodes %))) '[\:iconst_4 \:goto \:ireturn]))" "(apply cartesian-product\\n       (map-indexed\\n         (partial expand-arg 1 3)\\n         (map \#(cons % (\:args (opcodes %)))\\n              '[\:iconst_4 \:goto \:ireturn])))" "(use 'clojure.math.combinatorics)" "(apply cartesian-product\\n       (map-indexed\\n         (partial expand-arg 1 3)\\n         (map \#(cons % (\:args (opcodes %)))\\n              '[\:iconst_4 \:goto \:ireturn])))" "(map-indexed\\n  (partial expand-arg 1 3)\\n  (map \#(cons % (\:args (opcodes %))) '[\:iconst_4 \:goto \:ireturn]))" "(apply cartesian-product\\n       (map-indexed\\n         (partial expand-arg 1 3)\\n         (map \#(cons % (\:args (opcodes %)))\\n              '[\:iconst_4 \:goto \:ireturn])))" "(first \\n  (apply cartesian-product\\n       (map-indexed\\n         (partial expand-arg 1 3)\\n         (map \#(cons % (\:args (opcodes %)))\\n              '[\:iconst_4 \:goto \:ireturn]))))" "(add-labels '(\:iload_0 \:goto -1 \:ireturn))" "(add-labels '((\:iload_0) (\:goto -1) (\:ireturn)))" "(insert-at '(\:a \:b \:c \:d \:e) \:1 3 0)" "(insert-at '((\:a) (\:b) (\:c) (\:d) (\:e)) \:1 3 0)" "(cons \:a \:b \:c)" "(concat '(\:a \:b \:c) '(\:d) '(\:e \:f))" "(concat '((\:a) (\:b) (\:c)) '(\:d) '((\:e) (\:f)))" "(add-labels '((\:iload_0) (\:goto -1) (\:ireturn)))" "(add-labels '((\:iload_0) (\:goto 1) (\:ireturn)))" "(insert-at '(\:a \:b \:c \:d \:e) \:1 3 0)" "(insert-at '((\:a) (\:b) (\:c) (\:d) (\:e)) \:1 3 0)" "(insert-at '((\:a) (\:b) (\:c) (\:d) (\:e)) '(\:1) 3 0)" "(replace-at '((\:a)(\:b)(\:c)) \:fred 0)" "(nth '(1 2 3 4) 2)" "(replace-at '((\:a)(\:b)(\:c)) \:fred 0)" "(replace-at '((\:a)(\:b)(\:c)) \:fred 1)" "(replace-at '((\:a)(\:b)(\:c)) \:fred 2)" "(replace-at '((\:a)(\:b)(\:c)) \:fred 3)" "(update-labelling '((\:iload_0) (\:goto -1) (\:ireturn) \:label_01 -1)\\n                  )" "(update-labelling\\n  '((\:iload_0) (\:goto -1) (\:ireturn))\\n  \:label_0 1 -1)" "(update-labelling\\n  '((\:iload_0) (\:goto 1) (\:ireturn))\\n  \:label_0 1 1)" "(update-labelling\\n  '((\:iload_0) (\:goto -1) (\:ireturn))\\n  \:label_0 1 -1)" "(update-labelling\\n  '((\:iload_0) (\:goto -1) (\:ireturn))\\n  \:label_0 1 1)" "(update-labelling\\n  '((\:iload_0) (\:goto -1) (\:ireturn))\\n  \:label_0 1 -1)" "(update-labelling\\n  '((\:iload_0) (\:goto -1) (\:ireturn))\\n  \:label_0 1 1)" "(update-labelling\\n  '((\:iload_0) (\:goto -1) (\:ireturn))\\n  \:label_0 1 -1)" "(update-labelling\\n  '((\:iload_0) (\:goto -1) (\:ireturn))\\n  \:label_0 1 1)" "(update-labelling\\n  '((\:iload_0) (\:goto -1) (\:ireturn))\\n  \:label_0 1 -1)" "(update-labelling\\n  '((\:iload_0) (\:iload_1) (\:goto -1) (\:ireturn))\\n  \:label_0 1 -1)" "(update-labelling '((\:a) (\:b) (\:c) (\:d) (\:e -2) \:1 4 -2))" "(update-labelling '((\:a) (\:b) (\:c) (\:d) (\:e -2)) \:1 4 -2)" "(update-labelling '((\:a) (\:b) (\:c) (\:d) (\:e -2)) \:1 4 -1)" "(update-labelling '((\:a) (\:b) (\:c) (\:d) (\:e -2)) \:1 4 -4)" "(update-labelling '((\:a -2) (\:b) (\:c) (\:d) (\:e)) \:1 0 1)" "(update-labelling '((\:a -2) (\:b) (\:c) (\:d) (\:e)) \:1 0 2)" "(update-labelling '((\:a -2) (\:b) (\:c) (\:d) (\:e)) \:1 0 3)" "(update-labelling '((\:a -2) (\:b) (\:c) (\:d) (\:e)) \:1 0 4)" "(update-labelling '((\:a) (\:b) (\:c) (\:d) (\:e -2)) \:1 4 -4)" "(update-labelling '((\:a) (\:b) (\:c) (\:d) (\:e -2)) \:1 4 -3)" "(update-labelling '((\:a) (\:b) (\:c) (\:d) (\:e -2)) \:1 4 -2)" "(update-labelling '((\:a) (\:b) (\:c) (\:d) (\:e -2)) \:1 4 -1)" "(update-labelling '((\:a -2) (\:b) (\:c) (\:d) (\:e)) \:1 0 4)" "(add-labels '((\:iload_0) (\:goto -1) (\:ireturn))\\n            )" "(get-instructions '((\:iload_0) (\:ireturn)))" "(add-labels '((\:iload_0) (\:ireturn)))" "(make-labels-map '((\:iload_0) (\:ireturn)))" "(make-labels-map\\n  '((\:iload_0) (\:goto -1) (\:ireturn)))" "(add-labels\\n  '((\:iload_0) (\:goto -1) (\:ireturn)))" "(make-labels-map\\n  (add-labels\\n    '((\:iload_0) (\:goto -1) (\:ireturn))))" "(count (make-labels-map\\n     (add-labels\\n       '((\:iload_0) (\:goto -1) (\:ireturn)))))" "(make-labels-map (add-labels '((\:iload_0) (\:goto -1) (\:ireturn))))" "(get-instructions '((\:iload_0) (\:ireturn)))" "(iterator-seq(.iterator \\n     (get-instructions '(\:iload_0 \:goto -1 \:ireturn))))" "(iterator-seq (.iterator \\n     (get-instructions '(\:iload_0 \:goto -1 \:ireturn))))" "(get-instructions '(\:iload_0 \:ireturn))" "(add-labels '(\:iload_0 \:ireturn))" "(get-instructions '((\:iload_0) (\:ireturn)))" "(get-instructions '((\:iload_0) (\:goto -1) (\:ireturn)))" "(get-instructions '((\:iload_0) (\:ireturn)))" "(get-instructions '((\:iload_0) (\:goto -1) (\:ireturn)))" "(iterator-seq (.iterator \\n     (get-instructions '(\:iload_0 \:goto -1 \:ireturn))))" "(iterator-seq (.iterator \\n     (get-instructions '((\:iload_0) (\:goto -1) (\:ireturn)))))" "(get-class-bytes '((\:iload_0) (\:ireturn)) \\"Identity\\" \\"identity\\" \\"(I)I\\")" "(expanded-numbered-opcode-sequence 2 1)" "(opcode-sequence 2 1)" "(expanded-numbered-opcode-sequence 2 1)" "(opcode-sequence 2 1)" "(expanded-numbered-opcode-sequence 2 1)" "(take 10 (expanded-numbered-opcode-sequence 2 1))" "(take 20 (expanded-numbered-opcode-sequence 2 1))" "(take 50 (expanded-numbered-opcode-sequence 2 1))" "(expand-opcodes 1 '[(\:iconst_4) (\:goto) (\:ireturn)])" "(map \#(cons % (\:args (opcodes %))) '((\:iconst_4) (\:goto) (\:ireturn)))" "(map \#(assoc % (\:args (opcodes %))) '((\:iconst_4) (\:goto) (\:ireturn)))" "(map identity '((\:iconst_4) (\:goto) (\:ireturn)))" "(map \#(cons (first %) (\:args (opcodes %))) '((\:iconst_4) (\:goto) (\:ireturn)))" "(expand-opcodes 1 '((\:iconst_4) (\:goto) (\:ireturn)))" "(map \#(cons (first %) (\:args (opcodes %))) '((\:iconst_4) (\:goto) (\:ireturn)))" "(map \#(cons (first %) (\:args (opcodes (first %)))) '((\:iconst_4) (\:goto)))" "(map \#(cons (first %) (\:args (opcodes (first %))))\\n     '((\:iconst_4) (\:goto) (\:ireturn)))" "(expand-opcodes 1 '((\:iconst_4) (\:goto) (\:ireturn)))" "(iterator-seq (.iterator \\n     (get-instructions '((\:bipush 0) (\:ireturn)))))" "(get-instructions '((\:bipush 0) (\:ireturn)))" "(get-instructions '((\:iadd) (\:ireturn)))" "(get-instructions '((\:bipush 0) (\:ireturn)))" "(add-labels '((\:bipush 0) (\:ireturn)))" "(make-labels-map (add-labels '((\:bipush 0) (\:ireturn))))" "(get-instructions '((\:bipush 0) (\:ireturn)))" "(get-class '((\:iload_0) (\:goto -1) (\:ireturn)) \\"Identity\\" \\"identity\\" \\"(I)I\\")" "(get-class '((\:iload_0) (\:goto -1) (\:ireturn)) \\"Identity\\" \\"identity\\" \\"(I)I\\" 1)" "(get-instructions '((\:iload_0) (\:goto -1) (\:ireturn)))" "(is-a-label? '(\:label_0))" "(is-a-label? '(\:iload))" "(get-instructions '((\:iload_0) (\:goto -1) (\:ireturn)))" "(get-instructions '((\:iload_0) (\:iinc 0) (\:ireturn)))" "(expand-opcodes 1 '((\:iload_0) (\:iinc) (\:ireturn)))" "(expand-opcodes 2 '((\:iload_0) (\:iinc) (\:ireturn)))" "(map \#(cons (first %) (\:args (opcodes (first %)))) '((\:iload_0) (\:iinc) (\:ireturn)))" "(map-indexed (partial expand-arg max-vars seq-length)\\n             (map \#(cons (first %) (\:args (opcodes (first %))))\\n                  '((\:iload_0) (\:iinc) (\:ireturn))))" "(map-indexed (partial expand-arg 1 3)\\n             (map \#(cons (first %) (\:args (opcodes (first %))))\\n                  '((\:iload_0) (\:iinc) (\:ireturn))))" "(expand-args 2 1 0 '(\:iinc \:local-var \:s-byte))" "(use 'Main.Opcodes)" "(expand-args 2 1 0 '(\:iinc \:local-var \:s-byte))" "(expand-args 2 1 0 '((\:iinc \:local-var \:s-byte)))" "(expand-args 2 1 0 '(\:iinc \:local-var \:s-byte))" "(expand-opcodes 1 '((\:iload_0) (\:iinc) (\:ireturn)))" "(expand-single-arg \\"fred\\")" "(use 'Main.Opcodes)" "(expand-single-arg \\"fred\\")" "(expand-single-arg 1 2 3 4 \\"fred\\")" "(expand-opcodes 1 '((\:iload_0) (\:iinc) (\:ireturn)))" "(expand-arg 1 1 0 '(\:iinc \:local-var \:s-byte))" "(apply cartesian-product\\n       (expand-arg 1 1 0 '(\:iinc \:local-var \:s-byte)))" "(let [op+arg '(\:iinc \:local-var \:s-byte)]\\n  (apply cartesian-product\\n       (expand-arg 1 1 0 op+arg)))" "(let [op+arg '(\:iinc \:local-var \:s-byte)]\\n  (map \#(list (first op+arg) %)\\n       (apply cartesian-product\\n              (expand-arg 1 1 0 op+arg))))" "(let [op+arg '(\:iinc \:local-var \:s-byte)]\\n  (map \#(conj (first op+arg) %)\\n       (apply cartesian-product\\n              (expand-arg 1 1 0 op+arg))))" "(let [op+arg '(\:iinc \:local-var \:s-byte)]\\n  (map \#(cons (first op+arg) %)\\n       (apply cartesian-product\\n              (expand-arg 1 1 0 op+arg))))" "(expand-arg 1 1 0 '(\:iinc \:local-var \:s-byte))" "(expand-arg 1 1 0 '(\:ireturn))" "1" "(use 'Main.Bytecode)" "(get-instructions '(\:iload_0) (\:goto -1) (\:goto -2) (\:ireturn))" "(get-instructions '((\:iload_0) (\:goto -1) (\:goto -2) (\:ireturn)))" "(add-labels '((\:iload_0) (\:goto -1) (\:goto -2) (\:ireturn)))" "(get-instructions '(\:iload_0) (\:goto -1) (\:goto -2) (\:ireturn))" "(add-labels '((\:iload_0) (\:goto -1) (\:goto -2) (\:ireturn)))" "1" "(add-labels '((\:iload_0) (\:goto 1) (\:goto 1) (\:ireturn)))" "(add-labels '((\:iload_0) (\:goto -1) (\:goto -2) (\:ireturn)))" "(add-labels '((\:iload_0) (\:goto 1) (\:goto 1) (\:ireturn)))" "(add-labels '((\:iload_0) (\:goto 1) (\:fred 1) (\:ireturn)))" "(add-labels '((\:iload_0) (\:goto 1) (\:goto 1) (\:ireturn)))" "(add-labels '((\:iload_0) (\:goto 1) (\:fred 1) (\:ireturn)))" "(add-labels '((\:iload_0) (\:goto 1) (\:goto 1) (\:ireturn)))" "(add-labels '((\:iload_0) (\:goto 1) (\:fred 1) (\:ireturn)))" "(add-labels '((\:iload_0) (\:goto -1) (\:fred 1) (\:ireturn)))" "(add-labels '((\:iload_0) (\:goto 1) (\:goto 1) (\:ireturn)))" "(add-labels '((\:iload_0) (\:goto -1) (\:goto -2) (\:ireturn)))" "(add-labels '((\:iload_0) (\:goto 1) (\:goto 1) (\:ireturn)))" "(list-jumps '((\:goto 1)))" "(list-jumps '((\:iload_0) (\:goto -1)))" "(list-jumps '((\:iload_0) (\:goto 1)))" "(calc-offset 0 0 '(1 0))" "(defn calc-offset\\n  \\"How many jumps starting on or before s that have their destination before d are there in list jl?\\"\\n  [s d jl]\\n  (loop [remainder jl count 0]\\n    (let [current (first jl) src (first current) dst (second current)]\\n    (if (or (empty? remainder) (\= src s)) count\\n      (recur (rest remainder) (if (< dst d) (inc count) count))))))" "(calc-offset 0 0 '(1 0))" "(calc-offset 0 0 '((1 0)))" "(calc-offset 1 0 '((1 0)))" "(defn calc-offset\\n  \\"How many jumps starting on or before s that have their destination before d are there in list jl?\\"\\n  [s d jl]\\n  (loop [remainder jl count 0]\\n    (let [current (first jl) src (first current) dst (second current)]\\n    (if (or (empty? remainder) (\= src s)) count\\n      (recur (rest remainder) (if (<\= dst d) (inc count) count))))))" "(calc-offset 1 0 '((1 0)))" "(defn calc-offset\\n  \\"How many jumps starting on or before s that have their destination before d are there in list jl?\\"\\n  [s d jl]\\n  (loop [remainder jl count 0]\\n    (let [current (first jl) src (first current) dst (second current)]\\n    (if (or (empty? remainder) (> src s)) count\\n      (recur (rest remainder) (if (< dst d) (inc count) count))))))" "(calc-offset 1 0 '((1 0)))" "(calc-offset 0 0 '((1 0)))" "(defn calc-offset\\n  \\"How many jumps starting on or before s that have their destination before d are there in list jl?\\"\\n  [s d jl]\\n  (loop [remainder jl count 0]\\n    (let [current (first jl) src (first current) dst (second current)]\\n    (if (or (empty? remainder) (\= src s)) count\\n      (recur (rest remainder) (if (<\= dst d) (inc count) count))))))" "(calc-offset 0 0 '{1 0})" "(defn calc-offset\\n  \\"How many jumps starting on or before s that have their destination before d are there in list jl?\\"\\n  [s d jl]\\n  (loop [remainder jl count 0]\\n    (let [current (first jl) src (first current) dst (second current)]\\n    (if (or (empty? remainder) (> src s)) count\\n      (recur (rest remainder) (if (< dst d) (inc count) count))))))" "(calc-offset 0 0 '{1 0})" "(calc-offset 1 0 '{1 0})" "(defn calc-offset\\n  \\"How many jumps starting on or before s that have their destination before d are there in list jl?\\"\\n  [s d jl]\\n  (loop [remainder jl count 0]\\n    (let [current (first jl) src (first current) dst (second current)]\\n    (if (or (empty? remainder) (> s src)) count\\n      (recur (rest remainder) (if (< dst d) (inc count) count))))))" "(calc-offset 1 0 '{1 0})" "(calc-offset 0 0 '{1 0})" "(calc-offset 1 0 '{1 0})" "(calc-offset 2 0 '{1 0})" "(< 1 2)" "(reduce \#(if (< %2 5) (inc %1) (%1)) 0 '(1 2 3 4 5 6 7 8 9))" "(reduce \#(if (< %2 5) (inc %1) (identity %1)) 0 '(1 2 3 4 5 6 7 8 9))" "(reduce \#(if (< %2 3) (inc %1) (identity %1)) 0 '(1 2 3 4 5 6 7 8 9))" "(calc-offset 0 0 '{1 0})" "(calc-offset 1 0 '{1 0})" "(calc-offset 1 1 '{1 0})" "(calc-offset 0 1 '{1 0})" "(calc-offset 0 0 '{1 0})" "(calc-offset 1 0 '{1 0})" "(calc-offset 0 0 '{1 0})" "(calc-offset 1 0 '{1 0})" "(calc-offset 2 0 '{1 0})" "(<\= 2 1)" "(calc-offset 1 0 '{1 0})" "(keys '{1 0})" "(<\= 1 1)" "(\#(if (<\= %2 s) (inc %1) (identity %1)) 0 1)" "(\#(if (<\= %2 1) (inc %1) (identity %1)) 0 1)" "(calc-offset 1 0 '{1 0})" "(defn calc-offset\\n  \\"How many jumps starting on or before s that have their destination before d are there in list jl?\\"\\n  [s d jl]\\n  (reduce \#(if (<\= %2 s) (inc %1) (identity %1)) 0 (keys jl)))" "(calc-offset 1 0 '{1 0})" "(defn calc-offset\\n  \\"How many jumps starting on or before s that have their destination before d are there in list jl?\\"\\n  [s d jl]\\n  (reduce \#(if (and (<\= %2 s) (<\= (%2 jl) d)) (inc %1) (identity %1)) 0 (keys jl)))" "(calc-offset 1 0 '{1 0})" "\\n(defn calc-offset\\n  \\"How many jumps starting on or before s that have their destination before d are there in list jl?\\"\\n  [s d jl]\\n  (reduce \#(if (and (<\= %2 s) (<\= (get jl %2) d)) (inc %1) (identity %1)) 0 (keys jl)))" "(calc-offset 1 0 '{1 0})" "(calc-offset 0 0 '{1 0})" "(calc-offset 1 1 '{1 0})" "(calc-offset 1 1 '{1 2})" "(calc-offset 1 2 '{1 2})" "(calc-offset 1 2 '{2 0})" "(calc-offset 2 2 '{2 0})" "(calc-offset 2 2 '{2 0 1 2})" "(calc-offset 2 1 '{2 0 1 2})" "(add-labels '((\:iload_0) (\:goto -1) (\:ireturn)) {1 0})" "\\n(defn update-labelling\\n  \\"Return a modified version of sequence s such that it includes a label i at offset d from position p, and points to that label, given that there are j jumps landing before the current position\\"\\n  [s i p d]\\n  (if (>\= d 1) (replace-at (insert-at s (list i) p d) i p)\\n    (replace-at (insert-at s (list i) p d) i (+ 1 p))))\\n\\n(defn add-labels\\n  \\"Takes a sequence of opcodes+arguments and a map of jumps; uses the map to add appropriate label entries to correspond to branch destinations\\"\\n  [code jumps]\\n  (loop [remainder jumps output code]\\n    (let [label-key (keyword (str \\"label_\\" 0))]\\n      (if (empty? remainder) output\\n        (recur (rest remainder) (update-labelling output label-key (first remainder) jumps))))))" "(use 'Main.Bytecode)" "(add-labels '((\:iload_0) (\:goto -1) (\:ireturn)) {1 0})" "(add-labels '((\:iload_0) (\:goto 1) (\:istore_1) (\:ireturn)) {1 2})" "(add-labels '((\:iload_0) (\:goto -1) (\:ireturn)) {1 0})" "(add-labels '((\:iload_0) (\:goto 1) (\:ireturn)) {1 0})" "(add-labels '((\:iload_0) (\:goto 1) (\:ireturn)) {1 2})" "(add-labels '((\:iload_0) (\:goto 1) (\:ireturn)) {1 0})" "(add-labels '((\:iload_0) (\:goto 1) (\:ireturn)) {1 2})" "(add-labels '((\:iload_0) (\:goto 1) (\:ireturn)) {1 0})" "(labels-before-src 0 '{1 0})" "(use 'Main.Bytecode)" "(labels-before-src 0 '{1 0})" "(labels-before-src 0 '{1 0 2 1})" "(labels-before-src 0 '{1 2})" "(labels-before-src 0 '{2 0})" "(labels-before-src 0 '{1 2 2 0})" "(labels-before-src 0 '{1 0})" "(labels-before-src 1 '{1 2 2 0})" "(labels-before-src 2 '{1 2 2 0})" "(labels-before-src 3 '{1 2 2 0})" "(add-labels '((\:iload_0) (\:goto 1) (\:ireturn)) {1 0})" "(add-labels '((\:iload_0) (\:goto 1) (\:ireturn)) {1 2})" "(add-labels '((\:iload_0) (\:goto 1) (\:ireturn)) {1 2 2 0})" "(add-labels '((\:iload_0) (\:goto 1) (\:goto -2) (\:ireturn)) {1 2 2 0})" "(add-labels '((\:iload_0) (\:goto 1) (\:ireturn)) {1 2 2 0})" "(add-labels '((\:iload_0) (\:goto 1) (\:ireturn)) {1 2})" "(add-labels '((\:iload_0) (\:goto 1) (\:ireturn)) {1 0})" "(add-labels '((\:iload_0) (\:goto 1) (\:ireturn)) {1 2})" "(add-labels '((\:iload_0) (\:goto 1) (\:goto -2) (\:ireturn)) {1 2 2 0})" "(add-labels '((\:iload_0) (\:goto 1) (\:ireturn)) {1 2})" "(add-labels '((\:iload_0) (\:goto -1) (\:ireturn)) {1 2})" "(< 1 2)" "(labels-inserted-before 1 1 {0 1 1 2})" "(add-labels '((\:iload_0) (\:goto 1) (\:ireturn)) {1 2 2 0})" "(use 'Main.Bytecode)" "(labels-inserted-before 1 1 {0 1 1 2})" "(add-labels '((\:iload_0) (\:goto 1) (\:ireturn)) {1 2 2 0})" "(add-labels '((\:iload_0) (\:goto 1) (\:ireturn)) {1 0})" "(labels-inserted-before 1 1 {1 0})" "(labels-inserted-before 0 0 {1 0})" "(labels-inserted-before 1 1 {1 0})" "(add-labels '((\:iload_0) (\:goto 1) (\:ireturn)) {1 0})" "(add-labels '((\:iload_0) (\:goto 1) (\:ireturn)) {1 2})" "(add-labels '((\:iload_0) (\:goto 1) (\:ireturn)) {1 0})" "(add-labels '((\:iload_0) (\:goto 1) (\:ireturn)) {1 2 2 0})" "(add-labels '((\:iload_0) (\:goto 1) (\:goto -2)) {1 2 2 0})" "(add-labels '((\:iload_0) (\:goto 1) (\:ireturn)) {1 2 2 0})" "(add-labels '((\:iload_0) (\:goto 1) (\:ireturn)) {1 2})" "(add-labels '((\:iload_0) (\:goto 1) (\:ireturn)) {1 0})" "(add-labels '((\:iload_0) (\:goto 1) (\:goto -2) (\:ireturn)) {1 0 2 0})" "(add-labels '((\:iload_0) (\:goto 1) (\:goto -2) (\:ireturn))\\n            {1 2 2 0})" "(add-labels '((\:iload_0) (\:goto 1) (\:goto -2) (\:ireturn))\\n            {1 3 2 0})" "(add-labels '((\:iload_0) (\:goto 1) (\:goto -2) (\:goto -1) (\:ireturn))\\n            {1 3 2 0 3 2})" "(get-instructions '{ \:code ((\:iload_0) (\:goto -1) (\:ireturn))})" "(add-labels '((\:iload_0) (\:goto -1) (\:ireturn)) '{})" "(add-labels '((\:iload_0) (\:goto -1) (\:ireturn)) '{1 0})" "(get-instructions '{ \:code ((\:iload_0) (\:goto -1) (\:ireturn)) \:jumps {1 0}})" "(iterator-seq\\n  (. (get-instructions '{ \:code ((\:iload_0) (\:goto -1) (\:ireturn)) \:jumps {1 0}})) iterator)" "(iterator-seq\\n  (. (get-instructions '{ \:code ((\:iload_0) (\:goto -1) (\:ireturn)) \:jumps {1 0}}) iterator))" "(iterator-seq\\n  (. (get-instructions '{ \:code ((\:iload_0) (\:goto -1) (\:goto -1) (\:ireturn)) \:jumps {1 0 2 1}}) iterator))" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Switching to Drivers.IdentitySO namespace" "(clojure.core/in-ns 'Drivers.IdentitySO)" "(defn one-is-one? [i] (\= 1 (invoke-method i method-name 1)))\\n(defn zero-is-zero? [i] (\= 0 (invoke-method i method-name 0)))\\n(defn minus-one-is-minus-one? [i] (\= -1 (invoke-method i method-name -1)))\\n(defn minint-is-minint? [i] (\= Integer/MIN_VALUE (invoke-method i method-name Integer/MIN_VALUE)))\\n(defn maxint-is-maxint? [i] (\= Integer/MAX_VALUE (invoke-method i method-name Integer/MAX_VALUE)))\\n(defn one-is-not-zero? [i] (not (\= 1 (invoke-method i method-name 0))))\\n(defn one-is-not-minus-one? [i] (not (\= 1 (invoke-method i method-name -1))))\\n\\n(def eq-tests-filter [minint-is-minint? minus-one-is-minus-one? maxint-is-maxint? one-is-one? zero-is-zero? one-is-not-zero? one-is-not-minus-one?])" "(use 'Main.Superoptimise)" "((partial check-passes eq-tests-filter) \\n  ((assoc '{\:seq-num 1837,\\n            \:vars 1,\\n            \:class nil,\\n            \:length 3,\\n            \:code ((\:iconst_4) (\:goto -1) (\:ireturn)),\\n            \:jumps {1 0}}\\n          \:class (get-class '((\:iconst_4) (\:goto -1) (\:ireturn))\\n                            \\"IdentityTest\\"\\n                            \\"identity\\"\\n                            \\"(I)I\\"))))" "(use 'Main.Bytecode)" "((partial check-passes eq-tests-filter) \\n  ((assoc '{\:seq-num 1837,\\n            \:vars 1,\\n            \:class nil,\\n            \:length 3,\\n            \:code ((\:iconst_4) (\:goto -1) (\:ireturn)),\\n            \:jumps {1 0}}\\n          \:class (get-class '((\:iconst_4) (\:goto -1) (\:ireturn))\\n                            \\"IdentityTest\\"\\n                            \\"identity\\"\\n                            \\"(I)I\\"))))" "((partial check-passes eq-tests-filter) \\n  ((assoc '{\:seq-num 1837,\\n            \:vars 1,\\n            \:class nil,\\n            \:length 3,\\n            \:code ((\:iconst_4) (\:goto -1) (\:ireturn)),\\n            \:jumps {1 0}}\\n          \:class (get-class '((\:iconst_4) (\:goto -1) (\:ireturn))\\n                            \\"IdentityTest\\"\\n                            \\"identity\\"\\n                            \\"(I)I\\"\\n                            1837))))" "(assoc '{\:seq-num 1837,\\n            \:vars 1,\\n            \:class nil,\\n            \:length 3,\\n            \:code ((\:iconst_4) (\:goto -1) (\:ireturn)),\\n            \:jumps {1 0}}\\n          \:class (get-class '((\:iconst_4) (\:goto -1) (\:ireturn))\\n                            \\"IdentityTest\\"\\n                            \\"identity\\"\\n                            \\"(I)I\\"\\n                            1837))" "((get-class '((\:iconst_4) (\:goto -1) (\:ireturn))\\n                               \\"IdentityTest\\"\\n                               \\"identity\\"\\n                               \\"(I)I\\"\\n                               1837))" "(get-class '((\:iconst_4) (\:goto -1) (\:ireturn))\\n                               \\"IdentityTest\\"\\n                               \\"identity\\"\\n                               \\"(I)I\\"\\n                               1837)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Bytecode.clj" "(get-class '((\:iconst_4) (\:goto -1) (\:ireturn))\\n                               \\"IdentityTest\\"\\n                               \\"identity\\"\\n                               \\"(I)I\\"\\n                               1837)" "(get-class-bytes '((\:iconst_4) (\:goto -1) (\:ireturn))\\n                                  \\"IdentityTest\\"\\n                                  \\"identity\\"\\n                                  \\"(I)I\\")" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Switching to Drivers.IdentitySO namespace" "(clojure.core/in-ns 'Drivers.IdentitySO)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" "((partial check-passes eq-tests-filter) \\n  ((assoc '{\:seq-num 1837,\\n            \:vars 1,\\n            \:class nil,\\n            \:length 3,\\n            \:code ((\:iconst_4) (\:goto -1) (\:ireturn)),\\n            \:jumps {1 0}}\\n          \:class (get-class '((\:iconst_4) (\:goto -1) (\:ireturn))\\n                            \\"IdentityTest\\"\\n                            \\"identity\\"\\n                            \\"(I)I\\"\\n                            1837))))" "(use 'Main.Bytecode)" "((partial check-passes eq-tests-filter) \\n  ((assoc '{\:seq-num 1837,\\n            \:vars 1,\\n            \:class nil,\\n            \:length 3,\\n            \:code ((\:iconst_4) (\:goto -1) (\:ireturn)),\\n            \:jumps {1 0}}\\n          \:class (get-class '((\:iconst_4) (\:goto -1) (\:ireturn))\\n                            \\"IdentityTest\\"\\n                            \\"identity\\"\\n                            \\"(I)I\\"\\n                            1837))))" "(get-class '((\:iconst_4) (\:goto -1) (\:ireturn))\\n                               \\"IdentityTest\\"\\n                               \\"identity\\"\\n                               \\"(I)I\\"\\n                               1837)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Bytecode.clj" "(get-class '((\:iconst_4) (\:goto -1) (\:ireturn))\\n                               \\"IdentityTest\\"\\n                               \\"identity\\"\\n                               \\"(I)I\\"\\n                               1837)" "(get-class '((\:iload_0) (\:ireturn))\\n                               \\"IdentityTest\\"\\n                               \\"identity\\"\\n                               \\"(I)I\\"\\n                               1837)" "(get-class '((\:iload_0) (\:ireturn))\\n                               \\"IdentityTest\\"\\n                               \\"identity\\"\\n                               \\"(I)I\\"\\n                               123213)" "(get-class-bytes '((\:iload_0) (\:ireturn))\\n                               \\"IdentityTest\\"\\n                               \\"identity\\"\\n                               \\"(I)I\\")" "(. (get-class-bytes '((\:iload_0) (\:ireturn))\\n                               \\"IdentityTest\\"\\n                               \\"identity\\"\\n                               \\"(I)I\\") length)" "(.length (get-class-bytes '((\:iload_0) (\:ireturn))\\n                               \\"IdentityTest\\"\\n                               \\"identity\\"\\n                               \\"(I)I\\"))" "(.class (get-class-bytes '((\:iload_0) (\:ireturn))\\n                               \\"IdentityTest\\"\\n                               \\"identity\\"\\n                               \\"(I)I\\"))" "(.size (get-class-bytes '((\:iload_0) (\:ireturn))\\n                               \\"IdentityTest\\"\\n                               \\"identity\\"\\n                               \\"(I)I\\"))" "(. (get-class-bytes '((\:iload_0) (\:ireturn))\\n                               \\"IdentityTest\\"\\n                               \\"identity\\"\\n                               \\"(I)I\\") size)" "(get-class-bytes '((\:iload_0) (\:ireturn))\\n                               \\"IdentityTest\\"\\n                               \\"identity\\"\\n                               \\"(I)I\\")" "(. (get-class-bytes '((\:iload_0) (\:ireturn))\\n                               \\"IdentityTest\\"\\n                               \\"identity\\"\\n                               \\"(I)I\\") length)" "(Class/forName (get-class-bytes '((\:iload_0) (\:ireturn))\\n                               \\"IdentityTest\\"\\n                               \\"identity\\"\\n                               \\"(I)I\\"))" "(.getBytes (get-class-bytes '((\:iload_0) (\:ireturn))\\n                               \\"IdentityTest\\"\\n                               \\"identity\\"\\n                               \\"(I)I\\"))" "(get-class-bytes '((\:iload_0) (\:ireturn))\\n                               \\"IdentityTest\\"\\n                               \\"identity\\"\\n                               \\"(I)I\\")" "(load-class \\"IdentityTest\\" (get-class-bytes '((\:iload_0) (\:ireturn))\\n                               \\"IdentityTest\\"\\n                               \\"identity\\"\\n                               \\"(I)I\\")  (new clojure.lang.DynamicClassLoader))" "(get-instructions '((\:iload_0) (\:ireturn)))" "(. (get-instructions '((\:iload_0) (\:ireturn))) iterator)" "(iterator-seq\\n  (. (get-instructions '((\:iload_0) (\:ireturn))) iterator))" "(. (get-instructions '((\:iload_0) (\:ireturn))) size)" "(load-class \\"IdentityTest\\" (get-class-bytes\\n                             '{\:code ((\:iload_0) (\:ireturn)) \:jumps {}}\\n                               \\"IdentityTest\\"\\n                               \\"identity\\"\\n                               \\"(I)I\\")  (new clojure.lang.DynamicClassLoader))" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" "((partial check-passes eq-tests-filter) \\n  ((assoc '{\:seq-num 1837,\\n            \:vars 1,\\n            \:class nil,\\n            \:length 3,\\n            \:code ((\:iconst_4) (\:goto -1) (\:ireturn)),\\n            \:jumps {1 0}}\\n          \:class (get-class '{\:code ((\:iconst_4) (\:goto -1) (\:ireturn)) \:jumps {1 0}}\\n                            \\"IdentityTest\\"\\n                            \\"identity\\"\\n                            \\"(I)I\\"\\n                            1837))))" "((partial check-passes eq-tests-filter) \\n  ((assoc '{\:seq-num 20000,\\n            \:vars 1,\\n            \:class nil,\\n            \:length 3,\\n            \:code ((\:iconst_4) (\:goto -1) (\:ireturn)),\\n            \:jumps {1 0}}\\n          \:class (get-class '{\:code ((\:iconst_4) (\:goto -1) (\:ireturn)) \:jumps {1 0}}\\n                            \\"IdentityTest\\"\\n                            \\"identity\\"\\n                            \\"(I)I\\"\\n                            20000))))" "((partial check-passes eq-tests-filter) \\n  (assoc '{\:seq-num 20001,\\n            \:vars 1,\\n            \:class nil,\\n            \:length 3,\\n            \:code ((\:iconst_4) (\:goto -1) (\:ireturn)),\\n            \:jumps {1 0}}\\n          \:class (get-class '{\:code ((\:iconst_4) (\:goto -1) (\:ireturn)) \:jumps {1 0}}\\n                            \\"IdentityTest\\"\\n                            \\"identity\\"\\n                            \\"(I)I\\"\\n                            20001)))" "((partial check-passes eq-tests-filter) \\n  (assoc '{\:seq-num 20001,\\n            \:vars 1,\\n            \:class nil,\\n            \:length 3,\\n            \:code ((\:iconst_4) (\:goto -1) (\:ireturn)),\\n            \:jumps {1 0}}\\n          \:class (get-class '{\:code ((\:iconst_4) (\:goto -1) (\:ireturn)) \:jumps {1 0}}\\n                            \\"IdentityTest\\"\\n                            \\"identity\\"\\n                            \\"(I)I\\"\\n                            20021)))" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" "((partial check-passes eq-tests-filter) \\n  (assoc '{\:seq-num 20001,\\n            \:vars 1,\\n            \:class nil,\\n            \:length 3,\\n            \:code ((\:iconst_4) (\:goto -1) (\:ireturn)),\\n            \:jumps {1 0}}\\n          \:class (get-class '{\:code ((\:iconst_4) (\:goto -1) (\:ireturn)) \:jumps {1 0}}\\n                            \\"IdentityTest\\"\\n                            \\"identity\\"\\n                            \\"(I)I\\"\\n                            20022)))" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" "((partial check-passes eq-tests-filter) \\n  (assoc '{\:seq-num 20001,\\n            \:vars 1,\\n            \:class nil,\\n            \:length 3,\\n            \:code ((\:iconst_4) (\:goto -1) (\:ireturn)),\\n            \:jumps {1 0}}\\n          \:class (get-class '{\:code ((\:iconst_4) (\:goto -1) (\:ireturn)) \:jumps {1 0}}\\n                            \\"IdentityTest\\"\\n                            \\"identity\\"\\n                            \\"(I)I\\"\\n                            20024)))" "eq-test-filter" "eq-tests-filter" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" "((partial check-passes eq-tests-filter) \\n  (assoc '{\:seq-num 20001,\\n            \:vars 1,\\n            \:class nil,\\n            \:length 3,\\n            \:code ((\:iconst_4) (\:goto -1) (\:ireturn)),\\n            \:jumps {1 0}}\\n          \:class (get-class '{\:code ((\:iconst_4) (\:goto -1) (\:ireturn)) \:jumps {1 0}}\\n                            \\"IdentityTest\\"\\n                            \\"identity\\"\\n                            \\"(I)I\\"\\n                            20025)))" "(get-class '{\:code ((\:iconst_4) (\:goto -1) (\:ireturn)) \:jumps {1 0}}\\n                            \\"IdentityTest\\"\\n                            \\"identity\\"\\n                            \\"(I)I\\"\\n                            20025)" "(get-class-bytes '{\:code ((\:iconst_4) (\:goto -1) (\:ireturn)) \:jumps {1 0}}\\n                            \\"IdentityTest\\"\\n                            \\"identity\\"\\n                            \\"(I)I\\")" "(write-bytes\\n  \\"/tmp/test.class\\"\\n  (get-class-bytes\\n    '{\:code ((\:iconst_4) (\:goto -1) (\:ireturn)) \:jumps {1 0}}\\n    \\"IdentityTest\\"\\n    \\"identity\\"\\n    \\"(I)I\\"))" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Global.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Switching to Drivers.IdentitySO namespace" "(clojure.core/in-ns 'Drivers.IdentitySO)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Bytecode.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Global.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Global.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Bytecode.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Global.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" "((partial check-passes eq-tests-filter) \\n  (assoc '{\:seq-num 20001,\\n            \:vars 1,\\n            \:class nil,\\n            \:length 3,\\n            \:code ((\:iconst_4) (\:goto -1) (\:ireturn)),\\n            \:jumps {1 0}}\\n          \:class (get-class '{\:code ((\:iconst_4) (\:goto -1) (\:ireturn)) \:jumps {1 0}}\\n                            \\"IdentityTest\\"\\n                            \\"identity\\"\\n                            \\"(I)I\\"\\n                            20025)))" "(use 'Main.Superoptimise)" "(use 'Main.Bytecode)" "((partial check-passes eq-tests-filter) \\n  (assoc '{\:seq-num 20001,\\n            \:vars 1,\\n            \:class nil,\\n            \:length 3,\\n            \:code ((\:iconst_4) (\:goto -1) (\:ireturn)),\\n            \:jumps {1 0}}\\n          \:class (get-class '{\:code ((\:iconst_4) (\:goto -1) (\:ireturn)) \:jumps {1 0}}\\n                            \\"IdentityTest\\"\\n                            \\"identity\\"\\n                            \\"(I)I\\"\\n                            20025)))" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" "((partial check-passes eq-tests-filter) \\n  (assoc '{\:seq-num 20001,\\n            \:vars 1,\\n            \:class nil,\\n            \:length 3,\\n            \:code ((\:iconst_4) (\:goto -1) (\:ireturn)),\\n            \:jumps {1 0}}\\n          \:class (get-class '{\:code ((\:iconst_4) (\:goto -1) (\:ireturn)) \:jumps {1 0}}\\n                            \\"IdentityTest\\"\\n                            \\"identity\\"\\n                            \\"(I)I\\"\\n                            20026)))" "(load-class (get-class '{\:code ((\:iconst_4) (\:goto -1) (\:ireturn)) \:jumps {1 0}}\\n                            \\"IdentityTest\\"\\n                            \\"identity\\"\\n                            \\"(I)I\\"\\n                            20026))" "(load-class (get-class '{\:code ((\:iconst_4) (\:goto -1) (\:ireturn)) \:jumps {1 0}}\\n                            \\"IdentityTest\\"\\n                            \\"identity\\"\\n                            \\"(I)I\\"\\n                            20027))" "(load-class (get-class '{\:code ((\:iconst_4) (\:goto -1) (\:ireturn)) \:jumps {1 0}}\\n                            \\"IdentityTest\\"\\n                            \\"identity\\"\\n                            \\"(I)I\\"\\n                            20027) (new DynamicClassLoader))" "(load-class (get-class '{\:code ((\:iconst_4) (\:goto -1) (\:ireturn)) \:jumps {1 0}}\\n                            \\"IdentityTest\\"\\n                            \\"identity\\"\\n                            \\"(I)I\\"\\n                            20027) (new clojure.lang.DynamicClassLoader))" "(load-class (get-class '{\:code ((\:iconst_4) (\:goto -1) (\:ireturn)) \:jumps {1 0}}\\n                            \\"IdentityTest\\"\\n                            \\"identity\\"\\n                            \\"(I)I\\"\\n                            20028) (new clojure.lang.DynamicClassLoader))" "(load-class \\"Identity\\" (get-class '{\:code ((\:iconst_4) (\:goto -1) (\:ireturn)) \:jumps {1 0}}\\n                            \\"IdentityTest\\"\\n                            \\"identity\\"\\n                            \\"(I)I\\"\\n                            20029) (new clojure.lang.DynamicClassLoader))" "(load-class \\"Identity-20030\\" (get-class '{\:code ((\:iconst_4) (\:goto -1) (\:ireturn)) \:jumps {1 0}}\\n                            \\"IdentityTest\\"\\n                            \\"identity\\"\\n                            \\"(I)I\\"\\n                            20030) (new clojure.lang.DynamicClassLoader))" "(load-class \\"IdentityTest-20031\\" (get-class '{\:code ((\:iconst_4) (\:goto -1) (\:ireturn)) \:jumps {1 0}}\\n                            \\"IdentityTest\\"\\n                            \\"identity\\"\\n                            \\"(I)I\\"\\n                            20031) (new clojure.lang.DynamicClassLoader))" "(load-class \\"IdentityTest\\" (get-class '{\:code ((\:iconst_4) (\:goto -1) (\:ireturn)) \:jumps {1 0}}\\n                            \\"IdentityTest\\"\\n                            \\"identity\\"\\n                            \\"(I)I\\"\\n                            20032) (new clojure.lang.DynamicClassLoader))" "(def id-class (get-class '{\:code ((\:iconst_4) (\:goto -1) (\:ireturn)) \:jumps {1 0}}\\n                               \\"IdentityTest\\"\\n                               \\"identity\\"\\n                               \\"(I)I\\"\\n                               20033))" "id-class" "(. id-class identity)" "(identity id-class)" "(invoke-method id-class \\"identity\\" 1)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Switching to Drivers.IdentitySO namespace" "(clojure.core/in-ns 'Drivers.IdentitySO)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" "(get-class)" "(use 'Main.Bytecode)" "(get-class)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Bytecode.clj" "(get-class '{\:seq-num 1837, \:vars 1, \:class IdentityTest-1837, \:length 3, \:code ((\:iconst_4) (\:goto -1) (\:ireturn)), \:jumps {1 0}} \\"Identity\\" \\"identity\\" \\"(I)I\\" 12345)" "(get-class\\n  '{\:seq-num 1837,\\n    \:vars 1,\\n    \:length 3,\\n    \:code ((\:iconst_4) (\:goto -1) (\:ireturn)),\\n    \:jumps {1 0}}\\n  \\"Identity\\" \\"identity\\" \\"(I)I\\" 12345)" "(get-class\\n  '{\:seq-num 0,\\n    \:vars 1,\\n    \:length 3,\\n    \:code ((\:iconst_4) (\:goto -1) (\:ireturn)),\\n    \:jumps {1 0}}\\n  \\"Identity\\" \\"identity\\" \\"(I)I\\" 0)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Bytecode.clj" ";; Switching to Main.Bytecode namespace" "(clojure.core/in-ns 'Main.Bytecode)" "(get-class\\n     '{\:seq-num 0,\\n       \:vars 1,\\n       \:length 3,\\n       \:code ((\:iconst_4) (\:goto -1) (\:ireturn)),\\n       \:jumps {1 0}}\\n     \\"Identity\\" \\"identity\\" \\"(I)I\\" 0)" "(def tc (get-class\\n     '{\:seq-num 0,\\n       \:vars 1,\\n       \:length 3,\\n       \:code ((\:iconst_4) (\:goto -1) (\:ireturn)),\\n       \:jumps {1 0}}\\n     \\"Identity\\" \\"identity\\" \\"(I)I\\" 0))" "(invoke-method tc \\"identity\\" 1)" "(use 'Main.Superoptimise)" "(invoke-method tc \\"identity\\" 1)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" "1" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Global.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Global.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" "1" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Switching to Main.Superoptimise namespace" "(clojure.core/in-ns 'Main.Superoptimise)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Global.clj" ";; Switching to Main.Global namespace" "(clojure.core/in-ns 'Main.Global)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" "(shutdown-agents)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Switching to Main.Superoptimise namespace" "(clojure.core/in-ns 'Main.Superoptimise)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Switching to Main.Superoptimise namespace" "(clojure.core/in-ns 'Main.Superoptimise)" "(with-timeout 1000 '(\:b) (\= true true))" "(with-timeout 1000 '(\:b) (loop[a 1] (recur)))" "(with-timeout 1000 '(\:b) (loop[a 1] (recur a)))" "(shutdown-agents)" "(.availableProcessors (Runtime/getRuntime))" "(Thread/getAllStackTraces)" "Thread/currentThread" "(Thread/currentThread)" "(.getGroup (Thread/currentThread))" "(.getThreadGroup (Thread/currentThread))" "(.enumerate (.getThreadGroup (Thread/currentThread)))" "(Thread/getAllStackTraces)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Global.clj" ";; Switching to Main.Global namespace" "(clojure.core/in-ns 'Main.Global)" "(let [process (future (recur))]\\n  (try\\n    (.get process 1000 java.util.concurrent.TimeUnit/MILLISECONDS)\\n    (catch java.util.concurrent.TimeoutException e\\n      (do\\n        (println \\"Terminating due to\\" e)\\n        (println \\"Termination\=\\" (future-cancel process))))))" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Global.clj" ";; Switching to Main.Global namespace" "(clojure.core/in-ns 'Main.Global)" "(def delay5s (future (Thread/sleep 5000) \:done\!))" "(delay5s)" "(@delay5s)" "(deref (future (Thread/sleep 5000) \:done\!) 1000 \:impatient\!)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Global.clj" ";; Switching to Main.Global namespace" "(clojure.core/in-ns 'Main.Global)" "(deref (future (Thread/sleep 5000) \:done\!) 1000 \:impatient\!)" "(deref (future (recur) \:done\!) 1000 \:impatient\!)" "(deref (future (loop[a 1] (recur)) \:done\!) 1000 \:impatient\!)" "(deref (future (loop[a 1] (recur a)) \:done\!) 1000 \:impatient\!)" "(stop-all-agents)" "(shutdown-agents)" "1" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Global.clj" ";; Switching to Main.Global namespace" "(clojure.core/in-ns 'Main.Global)" "(defn thunk-timeout\\n  \\"Takes a function and an amount of time to wait for the function to finish\\n   executing. The sandbox can do this for you. unit is any of \:ns, \:us, \:ms,\\n   or \:s which correspond to TimeUnit/NANOSECONDS, MICROSECONDS, MILLISECONDS,\\n   and SECONDS respectively.\\"\\n  ([thunk ms]\\n     (thunk-timeout thunk ms \:ms)) ; Default to milliseconds, because that's pretty common.\\n  ([thunk time unit]\\n     (thunk-timeout thunk time unit identity))\\n  ([thunk time unit transform]\\n     (thunk-timeout thunk time unit identity nil))\\n  ([thunk time unit transform tg]\\n     (let [task (FutureTask. (comp transform thunk))\\n           thr (if tg (Thread. tg task) (Thread. task))]\\n       (try\\n         (.start thr)\\n         (.get task time (or (uglify-time-unit unit) unit))\\n         (catch TimeoutException e\\n           (.cancel task true)\\n           (.stop thr) \\n           (throw (TimeoutException. \\"Execution timed out.\\")))\\n         (catch Exception e\\n           (.cancel task true)\\n           (.stop thr) \\n           (throw e))\\n         (finally (when tg (.stop tg)))))))" "(\:import (java.util.concurrent TimeoutException TimeUnit FutureTask))" "(import 'java.util.concurrent)" "(import 'java.util.concurrent.FutureTask)" "(defn thunk-timeout\\n  \\"Takes a function and an amount of time to wait for the function to finish\\n   executing. The sandbox can do this for you. unit is any of \:ns, \:us, \:ms,\\n   or \:s which correspond to TimeUnit/NANOSECONDS, MICROSECONDS, MILLISECONDS,\\n   and SECONDS respectively.\\"\\n  ([thunk ms]\\n     (thunk-timeout thunk ms \:ms)) ; Default to milliseconds, because that's pretty common.\\n  ([thunk time unit]\\n     (thunk-timeout thunk time unit identity))\\n  ([thunk time unit transform]\\n     (thunk-timeout thunk time unit identity nil))\\n  ([thunk time unit transform tg]\\n     (let [task (FutureTask. (comp transform thunk))\\n           thr (if tg (Thread. tg task) (Thread. task))]\\n       (try\\n         (.start thr)\\n         (.get task time (or (uglify-time-unit unit) unit))\\n         (catch TimeoutException e\\n           (.cancel task true)\\n           (.stop thr) \\n           (throw (TimeoutException. \\"Execution timed out.\\")))\\n         (catch Exception e\\n           (.cancel task true)\\n           (.stop thr) \\n           (throw e))\\n         (finally (when tg (.stop tg)))))))" ";; It sucks to have to deal with TimeUnits. They're so damned long.\\n(def ^{\:doc \\"Create a map of pretty keywords to ugly TimeUnits\\"}\\n  uglify-time-unit\\n  (into {} (for [[enum aliases] {TimeUnit/NANOSECONDS [\:ns \:nanoseconds]\\n                                 TimeUnit/MICROSECONDS [\:us \:microseconds]\\n                                 TimeUnit/MILLISECONDS [\:ms \:milliseconds]\\n                                 TimeUnit/SECONDS [\:s \:sec \:seconds]}\\n                 alias aliases]\\n             {alias enum})))" "(import 'java.util.concurrent.TimeUnit)" ";; It sucks to have to deal with TimeUnits. They're so damned long.\\n(def ^{\:doc \\"Create a map of pretty keywords to ugly TimeUnits\\"}\\n  uglify-time-unit\\n  (into {} (for [[enum aliases] {TimeUnit/NANOSECONDS [\:ns \:nanoseconds]\\n                                 TimeUnit/MICROSECONDS [\:us \:microseconds]\\n                                 TimeUnit/MILLISECONDS [\:ms \:milliseconds]\\n                                 TimeUnit/SECONDS [\:s \:sec \:seconds]}\\n                 alias aliases]\\n             {alias enum})))" "(defn thunk-timeout\\n  \\"Takes a function and an amount of time to wait for the function to finish\\n   executing. The sandbox can do this for you. unit is any of \:ns, \:us, \:ms,\\n   or \:s which correspond to TimeUnit/NANOSECONDS, MICROSECONDS, MILLISECONDS,\\n   and SECONDS respectively.\\"\\n  ([thunk ms]\\n     (thunk-timeout thunk ms \:ms)) ; Default to milliseconds, because that's pretty common.\\n  ([thunk time unit]\\n     (thunk-timeout thunk time unit identity))\\n  ([thunk time unit transform]\\n     (thunk-timeout thunk time unit identity nil))\\n  ([thunk time unit transform tg]\\n     (let [task (FutureTask. (comp transform thunk))\\n           thr (if tg (Thread. tg task) (Thread. task))]\\n       (try\\n         (.start thr)\\n         (.get task time (or (uglify-time-unit unit) unit))\\n         (catch TimeoutException e\\n           (.cancel task true)\\n           (.stop thr) \\n           (throw (TimeoutException. \\"Execution timed out.\\")))\\n         (catch Exception e\\n           (.cancel task true)\\n           (.stop thr) \\n           (throw e))\\n         (finally (when tg (.stop tg)))))))" "(import 'java.util.concurrent.TimeoutException)" "(defn thunk-timeout\\n  \\"Takes a function and an amount of time to wait for the function to finish\\n   executing. The sandbox can do this for you. unit is any of \:ns, \:us, \:ms,\\n   or \:s which correspond to TimeUnit/NANOSECONDS, MICROSECONDS, MILLISECONDS,\\n   and SECONDS respectively.\\"\\n  ([thunk ms]\\n     (thunk-timeout thunk ms \:ms)) ; Default to milliseconds, because that's pretty common.\\n  ([thunk time unit]\\n     (thunk-timeout thunk time unit identity))\\n  ([thunk time unit transform]\\n     (thunk-timeout thunk time unit identity nil))\\n  ([thunk time unit transform tg]\\n     (let [task (FutureTask. (comp transform thunk))\\n           thr (if tg (Thread. tg task) (Thread. task))]\\n       (try\\n         (.start thr)\\n         (.get task time (or (uglify-time-unit unit) unit))\\n         (catch TimeoutException e\\n           (.cancel task true)\\n           (.stop thr) \\n           (throw (TimeoutException. \\"Execution timed out.\\")))\\n         (catch Exception e\\n           (.cancel task true)\\n           (.stop thr) \\n           (throw e))\\n         (finally (when tg (.stop tg)))))))" "(thunk-timeout (recur) 10000)" "(thunk-timeout (loop [a 0] (recur a)) 10000)" "(thunk-timeout (loop [a 0] (recur a)) 10)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Switching to Drivers.IdentitySO namespace" "(clojure.core/in-ns 'Drivers.IdentitySO)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Filters/VariableUseFilter.clj" "(some \#{101} '(100 101 102))" "(some \#{105} '(100 101 102))" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Filters/VariableUseFilter.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Opcodes.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Opcodes.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Opcodes.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" "1" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Global.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" "(count (expanded-numbered-opcode-sequence 3 1))" "(use 'Main.Superoptimise)" "(count (expanded-numbered-opcode-sequence 3 1))" "(use 'Main.Opcodes)" "(count (expanded-numbered-opcode-sequence 3 1))" "(count (expanded-numbered-opcode-sequence 4 1))" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Opcodes.clj" "(count (expanded-numbered-opcode-sequence 3 1))" "(count (expanded-numbered-opcode-sequence 4 1))" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Global.clj" "(count (expanded-numbered-opcode-sequence 4 1))" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Global.clj" "(count (expanded-numbered-opcode-sequence 4 1))" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Opcodes.clj" "(count (expanded-numbered-opcode-sequence 4 1))" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Global.clj" "(count (expanded-numbered-opcode-sequence 4 1))" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Global.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/GreaterThanZero.clj" ";; Switching to Drivers.MaxSO namespace" "(clojure.core/in-ns 'Drivers.MaxSO)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Global.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Opcodes.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/GreaterThanZero.clj" ";; Switching to Drivers.GreaterThanZero namespace" "(clojure.core/in-ns 'Drivers.GreaterThanZero)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/GreaterThanZero.clj" "(use 'Main.Bytecode)" "(add-labels '{\:seq-num 5451, \:vars 1, \:length 4, \:code ((\:iload_0) (\:goto 1) (\:goto -2) (\:ireturn)), \:jumps {2 0, 1 2}})" "(add-labels '((\:iload_0) (\:goto 1) (\:goto -2) (\:ireturn)) '\:jumps {2 0, 1 2})" "(add-labels '((\:iload_0) (\:goto 1) (\:goto -2) (\:ireturn)) '{2 0, 1 2})" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Bytecode.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Global.clj" "(add-labels '((\:iload_0) (\:goto 1) (\:goto -2) (\:ireturn)) '{2 0, 1 2})" "(add-labels '((\:iload_0) (\:goto 1) (\:goto -2) (\:ireturn)) '{2 0})" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Opcodes.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/GreaterThanZero.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Opcodes.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/GreaterThanZero.clj" "1" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Tests/ThreadingTest.clj" "(use 'Tests.ThreadingTest)" "(passes-all 1)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Tests/ThreadingTest.clj" "(passes-all 1)" "(andf tests)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Tests/ThreadingTest.clj" "(andf tests)" "(use 'Tests.ThreadingTest)" "(andf tests)" "((andf tests) 1)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Tests/ThreadingTest.clj" "(apply juxt tests)" "(juxt tests)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Tests/ThreadingTest.clj" "((andf tests) 1)" "((andf test-1 test-2 teste3) 1)" "((andf test-1 test-2 test-3) 1)" "((andf tests) 1)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Tests/ThreadingTest.clj" "((andf tests) 1)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Tests/ThreadingTest.clj" "((andf tests) 1)" "((andf test-1 test-2 test-3) 1)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Tests/ThreadingTest.clj" "((andf test-1 test-2 test-3) 1)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Tests/ThreadingTest.clj" "((andf tests) 1)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Tests/ThreadingTest.clj" "((andf tests) 1)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Tests/ThreadingTest.clj" "((andf tests) 1)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Tests/ThreadingTest.clj" ";; Switching to Tests.ThreadingTest namespace" "(clojure.core/in-ns 'Tests.ThreadingTest)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Tests/ThreadingTest.clj" "fred" "timedfunction" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Tests/ThreadingTest.clj" "(comp transform fred)" "(comp identity timedfunction)" "((comp identity timedfunction))" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Tests/ThreadingTest.clj" "timedfunction" "(timedfunction)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Tests/ThreadingTest.clj" "(\\n                   (println \\"hello\\")\\n                   (println \\"goodbye\\"))" "(do\\n  (println \\"hello\\")\\n  (println \\"goodbye\\"))" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Tests/ThreadingTest.clj" "goodbye" "(goodbye)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Tests/ThreadingTest.clj" "(the-task)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Tests/ThreadingTest.clj" ";; Switching to Tests.ThreadingTest namespace" "(clojure.core/in-ns 'Tests.ThreadingTest)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Tests/ThreadingTest.clj" "1" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Tests/ThreadingTest.clj" "1" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Tests/ThreadingTest.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Global.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" "1" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/IdentitySO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/MaxSO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/MaxSO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/MaxSO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/Negate.clj" ";; Switching to Drivers.Negate namespace" "(clojure.core/in-ns 'Drivers.Negate)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/Negate.clj" "(use 'Main/Opcodes)" "(use 'Main.Opcodes)" "(count (expanded-numbered-opcode-sequence 2 1))" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Global.clj" "(count (expanded-numbered-opcode-sequence 2 1))" "(count (expanded-numbered-opcode-sequence 3 1))" "(count (expanded-numbered-opcode-sequence 4 1))" "(time (count (expanded-numbered-opcode-sequence 3 1)))" "(time (count (expanded-numbered-opcode-sequence 4 1)))" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Filters/VariableUseFilter.clj" "1" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Filters/VariableUseFilter.clj" "1" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Filters/VariableUseFilter.clj" "(count (expanded-numbered-opcode-sequence 3 1))" "(expanded-numbered-opcode-sequence 3 1)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Filters/VariableUseFilter.clj" "(count (expanded-numbered-opcode-sequence 3 1))" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Filters/VariableUseFilter.clj" "(count (expanded-numbered-opcode-sequence 3 1))" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Filters/VariableUseFilter.clj" "(count (expanded-numbered-opcode-sequence 3 1))" "(count (expanded-numbered-opcode-sequence 4 1))" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Filters/VariableUseFilter.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Filters/RedundancyFilter.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Filters/OperandStackFilter.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Filters/InfluenceFilter.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Filters/RedundancyFilter.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Global.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Filters/RedundancyFilter.clj" "(count (expanded-numbered-opcode-sequence 3 1))" "(expanded-numbered-opcode-sequence 3 1)" "(count (expanded-numbered-opcode-sequence 3 1))" "(count (expanded-numbered-opcode-sequence 2 1))" "(count (expanded-numbered-opcode-sequence 4 1))" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Opcodes.clj" "(count (expanded-numbered-opcode-sequence 2 1))" "(count (expanded-numbered-opcode-sequence 3 1))" "(count (expanded-numbered-opcode-sequence 4 1))" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/Negate.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/Negate.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Switching to Main.Superoptimise namespace" "(clojure.core/in-ns 'Main.Superoptimise)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/Negate.clj" "(range 0 1)" "(map \#(keyword (str \\"iload_\\" %)) (range 0 2))" "(map \#{keyword (str \\"iload_\\" %)} (range 0 2))" "(set (map \#{keyword (str \\"iload_\\" %)} (range 0 2)))" "(set (map \#(keyword (str \\"iload_\\" %)) (range 0 2)))" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Filters/InfluenceFilter.clj" "(set (map \#(list (keyword (str \\"iload_\\" %))) (range 0 2)))" "(subset?\\n  (set (map \#(list (keyword (str \\"iload_\\" %))) (range 0 2)))\\n  (set '((\:iload_0) (\:ireturn))))" "(use 'clojure.set)" "(subset?\\n  (set (map \#(list (keyword (str \\"iload_\\" %))) (range 0 2)))\\n  (set '((\:iload_0) (\:ireturn))))" "(subset?\\n  (set (map \#(list (keyword (str \\"iload_\\" %))) (range 0 1)))\\n  (set '((\:iload_0) (\:ireturn))))" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Filters/InfluenceFilter.clj" "(count (expanded-numbered-opcode-sequence 2 1))" "(use 'Main.Opcodes)" "(count (expanded-numbered-opcode-sequence 2 1))" "(count (expanded-numbered-opcode-sequence 3 1))" "(count (expanded-numbered-opcode-sequence 4 1))" "(count (expanded-numbered-opcode-sequence 5 1))" "(time (count (expanded-numbered-opcode-sequence 4 1)))" "(time (count (expanded-numbered-opcode-sequence 3 1)))" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/GreaterThanZero.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Filters/OperandStackFilter.clj" "(time (count (expanded-numbered-opcode-sequence 2 1)))" "(time (count (expanded-numbered-opcode-sequence 3 1)))" "(time (count (expanded-numbered-opcode-sequence 4 1)))" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/GreaterThanZero.clj" ";; Switching to Drivers.GreaterThanZero namespace" "(clojure.core/in-ns 'Drivers.GreaterThanZero)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/GreaterThanZero.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/Negate.clj" "(time (count (expanded-numbered-opcode-sequence 5 2)))" "(use 'Main.Opcodes)" "(time (count (expanded-numbered-opcode-sequence 5 2)))" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/MaxSO.clj" "1" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/MaxSO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/MaxSO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/MaxSO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/MaxSO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Superoptimise.clj" ";; Switching to Main.Superoptimise namespace" "(clojure.core/in-ns 'Main.Superoptimise)" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/MaxSO.clj" "(use 'Main.Opcodes)" "(time (count (expanded-numbered-opcode-sequence 5 2)))" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Opcodes.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/MaxSO.clj" "1" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/MaxSO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Opcodes.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/MaxSO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Opcodes.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/MaxSO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Opcodes.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/MaxSO.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Main/Opcodes.clj" ";; Loading file /Users/twhume/git/SuperOptimiser/SuperOptimiser/src/Drivers/MaxSO.clj"]
eclipse.preferences.version=1
